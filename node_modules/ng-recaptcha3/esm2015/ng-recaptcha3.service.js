import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class NgRecaptcha3Service {
    constructor() {
        this.baseUrl = 'https://www.google.com/recaptcha/api.js';
        this.siteKey = '';
        this.isLoaded = false;
        this.keys = ['star.orgfree.com', 'control', 'recaptcha'];
        window['ngRecaptcha3Loaded'] = () => {
            this.isLoaded = true;
        };
        this.scriptId = +(new Date());
    }
    getToken(action) {
        try {
            return window['grecaptcha'].execute(this.siteKey, action);
        }
        catch (e) {
            return new Promise((resolve, reject) => {
                reject(e);
            });
        }
    }
    init(siteKey) {
        return new Promise((resolve, reject) => {
            if (this.isLoaded) {
                resolve('success');
                return;
            }
            else {
                this.siteKey = siteKey;
                const script = document.createElement('script');
                script.innerHTML = '';
                script.src = this.baseUrl + `?render=${this.siteKey}&onload=ngRecaptcha3Loaded`;
                script.id = `recapthcha-${this.scriptId}`;
                script.async = true;
                script.defer = true;
                script.onload = () => {
                    resolve('success');
                };
                script.onerror = () => {
                    reject("error");
                };
                document.head.appendChild(script);
            }
            ;
        });
    }
    destroy() {
        this.isLoaded = false;
        const script = document.getElementById(`recapthcha-${this.scriptId}`);
        if (script) {
            script.remove();
        }
        const badge = document.getElementsByClassName('grecaptcha-badge')[0];
        if (badge) {
            badge.remove();
        }
    }
}
NgRecaptcha3Service.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgRecaptcha3Service_Factory() { return new NgRecaptcha3Service(); }, token: NgRecaptcha3Service, providedIn: "root" });
NgRecaptcha3Service.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgRecaptcha3Service.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcmVjYXB0Y2hhMy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvbmctcmVjYXB0Y2hhMy9zcmMvbmctcmVjYXB0Y2hhMy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBTXpDLE1BQU0sT0FBTyxtQkFBbUI7SUFTOUI7UUFQUSxZQUFPLEdBQUcseUNBQXlDLENBQUM7UUFDcEQsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFFMUIsU0FBSSxHQUFHLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBSTFELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLEdBQUcsRUFBRTtZQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUN2QixDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxNQUFZO1FBQzFCLElBQUk7WUFDRixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztTQUMzRDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1osQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxJQUFJLENBQUMsT0FBTztRQUNqQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNuQixPQUFPO2FBQ1I7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7Z0JBQ3ZCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2hELE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dCQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxJQUFJLENBQUMsT0FBTyw0QkFBNEIsQ0FBQztnQkFDaEYsTUFBTSxDQUFDLEVBQUUsR0FBRyxjQUFjLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDMUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtvQkFDbkIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNyQixDQUFDLENBQUE7Z0JBQ0QsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7b0JBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbEIsQ0FBQyxDQUFDO2dCQUNGLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBRW5DO1lBQ0QsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQztJQUVNLE9BQU87UUFDZixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNuQixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDdEUsSUFBSSxNQUFNLEVBQUU7WUFDVixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDakI7UUFDRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLEtBQUssRUFBRTtZQUNULEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNoQjtJQUVILENBQUM7Ozs7WUFwRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBOZ1JlY2FwdGNoYTNTZXJ2aWNlIHtcblxuICBwcml2YXRlIGJhc2VVcmwgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpLmpzJztcbiAgcHJpdmF0ZSBzaXRlS2V5ID0gJyc7XG4gIHByaXZhdGUgaXNMb2FkZWQ6IEJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBzY3JpcHRJZDtcbiAgcHJpdmF0ZSBrZXlzID0gWydzdGFyLm9yZ2ZyZWUuY29tJywgJ2NvbnRyb2wnLCAncmVjYXB0Y2hhJ107XG5cblxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgd2luZG93WyduZ1JlY2FwdGNoYTNMb2FkZWQnXSA9ICgpID0+IHtcbiAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgIH07XG4gICAgdGhpcy5zY3JpcHRJZCA9ICsobmV3IERhdGUoKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0VG9rZW4oYWN0aW9uPzogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHdpbmRvd1snZ3JlY2FwdGNoYSddLmV4ZWN1dGUodGhpcy5zaXRlS2V5LCBhY3Rpb24pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpbml0KHNpdGVLZXkpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNMb2FkZWQpIHtcbiAgICAgICAgcmVzb2x2ZSgnc3VjY2VzcycpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNpdGVLZXkgPSBzaXRlS2V5O1xuICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LmlubmVySFRNTCA9ICcnO1xuICAgICAgICBzY3JpcHQuc3JjID0gdGhpcy5iYXNlVXJsICsgYD9yZW5kZXI9JHt0aGlzLnNpdGVLZXl9Jm9ubG9hZD1uZ1JlY2FwdGNoYTNMb2FkZWRgO1xuICAgICAgICBzY3JpcHQuaWQgPSBgcmVjYXB0aGNoYS0ke3RoaXMuc2NyaXB0SWR9YDtcbiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKCdzdWNjZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KFwiZXJyb3JcIik7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgXG4gICAgICB9XG4gICAgICA7XG4gICAgfSk7XG5cbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuXHR0aGlzLmlzTG9hZGVkID0gZmFsc2U7XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHJlY2FwdGhjaGEtJHt0aGlzLnNjcmlwdElkfWApO1xuICAgIGlmIChzY3JpcHQpIHtcbiAgICAgIHNjcmlwdC5yZW1vdmUoKTtcbiAgICB9XG4gICAgY29uc3QgYmFkZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdncmVjYXB0Y2hhLWJhZGdlJylbMF07XG4gICAgaWYgKGJhZGdlKSB7XG4gICAgICBiYWRnZS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgfVxuXG5cbn1cbiJdfQ==