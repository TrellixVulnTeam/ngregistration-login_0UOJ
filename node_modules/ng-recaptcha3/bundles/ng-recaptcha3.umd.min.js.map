{"version":3,"sources":["../../../projects/ng-recaptcha3/src/ng-recaptcha3.service.ts"],"names":["NgRecaptcha3Service","_this","this","baseUrl","siteKey","isLoaded","keys","window","scriptId","Date","prototype","getToken","action","execute","e","Promise","resolve","reject","init","script","document","createElement","innerHTML","src","id","async","defer","onload","onerror","head","appendChild","destroy","getElementById","remove","badge","getElementsByClassName","Injectable","args","providedIn"],"mappings":"onBAeE,SAAAA,IAAA,IAAAC,EAAAC,KAPQA,KAAAC,QAAU,0CACVD,KAAAE,QAAU,GACVF,KAAAG,UAAoB,EAEpBH,KAAAI,KAAO,CAAC,mBAAoB,UAAW,aAI7CC,OAA2B,mBAAI,WAC7BN,EAAKI,UAAW,GAElBH,KAAKM,UAAW,IAAMC,YAGjBT,EAAAU,UAAAC,SAAA,SAASC,GACd,IACE,OAAOL,OAAmB,WAAEM,QAAQX,KAAKE,QAASQ,GAClD,MAAOE,GACP,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BA,EAAOH,QAKNd,EAAAU,UAAAQ,KAAA,SAAKd,GAAL,IAAAH,EAAAC,KACL,OAAO,IAAIa,SAAQ,SAACC,EAASC,GAC3B,GAAIhB,EAAKI,SACPW,EAAQ,eADV,CAIEf,EAAKG,QAAUA,EACf,IAAMe,EAASC,SAASC,cAAc,UACtCF,EAAOG,UAAY,GACnBH,EAAOI,IAAMtB,EAAKE,QAAU,WAAWF,EAAKG,QAAO,6BACnDe,EAAOK,GAAK,cAAcvB,EAAKO,SAC/BW,EAAOM,OAAQ,EACfN,EAAOO,OAAQ,EACfP,EAAOQ,OAAS,WACdX,EAAQ,YAEVG,EAAOS,QAAU,WACfX,EAAO,UAETG,SAASS,KAAKC,YAAYX,QAQzBnB,EAAAU,UAAAqB,QAAA,WACR7B,KAAKG,UAAW,EACb,IAAMc,EAASC,SAASY,eAAe,cAAc9B,KAAKM,UACtDW,GACFA,EAAOc,SAET,IAAMC,EAAQd,SAASe,uBAAuB,oBAAoB,GAC9DD,GACFA,EAAMD,8HAjEXG,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY","sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NgRecaptcha3Service {\n\n  private baseUrl = 'https://www.google.com/recaptcha/api.js';\n  private siteKey = '';\n  private isLoaded: Boolean = false;\n  private scriptId;\n  private keys = ['star.orgfree.com', 'control', 'recaptcha'];\n\n\n  public constructor() {\n    window['ngRecaptcha3Loaded'] = () => {\n      this.isLoaded = true;\n    };\n    this.scriptId = +(new Date());\n  }\n\n  public getToken(action?: any): Promise<any> {\n    try {\n      return window['grecaptcha'].execute(this.siteKey, action);\n    } catch (e) {\n      return new Promise((resolve, reject) => {\n        reject(e);\n      });\n    }\n  }\n\n  public init(siteKey) {\n    return new Promise((resolve, reject) => {\n      if (this.isLoaded) {\n        resolve('success');\n        return;\n      } else {\n        this.siteKey = siteKey;\n        const script = document.createElement('script');\n        script.innerHTML = '';\n        script.src = this.baseUrl + `?render=${this.siteKey}&onload=ngRecaptcha3Loaded`;\n        script.id = `recapthcha-${this.scriptId}`;\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          resolve('success');\n        }\n        script.onerror = () => {\n          reject(\"error\");\n        };\n        document.head.appendChild(script);\n        \n      }\n      ;\n    });\n\n  }\n\n  public destroy() {\n\tthis.isLoaded = false;\n    const script = document.getElementById(`recapthcha-${this.scriptId}`);\n    if (script) {\n      script.remove();\n    }\n    const badge = document.getElementsByClassName('grecaptcha-badge')[0];\n    if (badge) {\n      badge.remove();\n    }\n\n  }\n\n\n}\n"]}